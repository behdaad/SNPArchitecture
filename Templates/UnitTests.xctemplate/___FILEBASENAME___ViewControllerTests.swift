//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates, edited by
//  Behdad Keynejad for Snapp, so you can apply clean architecture to your
//  iOS and Mac projects, see http://clean-swift.com
//

import XCTest
@testable import ___PROJECTNAMEASIDENTIFIER___

class ___VARIABLE_sceneName___ViewControllerTests: XCTestCase {
    // MARK: - Properties
    var testViewController: ___VARIABLE_sceneName___ViewController!
    var window: UIWindow!
    
    // MARK: - Methods
    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setup___VARIABLE_sceneName___ViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    func setup___VARIABLE_sceneName___ViewController() {
        let testViewController = ___VARIABLE_sceneName___ViewController()
        testViewController.view
    }
    
    func loadView() {
        window.addSubview(testViewController.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Mocks
    class ___VARIABLE_sceneName___InteractorMock: ___VARIABLE_sceneName___InteractorProtocol {
        var doSomethingCalled = false
        
        func doSomething(request: ___VARIABLE_sceneName___.Something.Request) {
            doSomethingCalled = true
        }
    }
    
    // MARK: - Tests
    func testShouldDoSomethingWhenViewIsLoaded() {
        // Given
        let interactorMock = ___VARIABLE_sceneName___InteractorMock()
        testViewController.interactor = interactorMock
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(interactorMock.doSomethingCalled, "viewDidLoad() should ask the interactor to do something")
    }
    
    func testDisplaySomething() {
        // Given
        let viewModel = ___VARIABLE_sceneName___.Something.ViewModel()
        
        // When
        loadView()
        testViewController.display(viewModel: viewModel)
        
        // Then
        //XCTAssertEqual(sut.nameTextField.text, "", "displaySomething(viewModel:) should update the name text field")
    }
}
